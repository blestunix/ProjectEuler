/*
  * Aim:  Highly divisible triangular number
  *
  * Author: Saud Kadiri
  *
  * Dated: Wednesday, December 22, 2021
  * 
  * Details:
  *   The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  *       1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  *   Let us list the factors of the first seven triangle numbers:
  *     1: 1
  *     3: 1,3
  *     6: 1,2,3,6
  *     10: 1,2,5,10
  *     15: 1,3,5,15
  *     21: 1,3,7,21
  *     28: 1,2,4,7,14,28
  *   We can see that 28 is the first triangle number to have over five divisors.
  * What is the value of the first triangle number to have over five hundred divisors?
  *
  * Approach used:
  *   Intelligently find the number of divisors and use brute-force to get every such until the number is greater than the target.
  *   Then the number of divisors is given by:
  *       𝜏(n) = Π(eᵢ + 1)     (1 to k)
  */

struct HighlyDivisibleTriangularNumber {
    func solution(over: Int) -> Int {
        var tri_num = 1 // triangle number
        var n = 1       // nth triangle number
        while (no_of_divisors(tri_num) <= over) {
            n += 1          // go for (n + 1)th triangle num
            tri_num += n    // get the next triangle number using the new n
        }
        return tri_num
    }

    private func no_of_divisors(_ num: Int) -> Int {
        guard num != 1 else { return 1 }
        var k = num
        var i = 2           // first prime number
        var tau_n = 1       // every natural number has at least one divisor i.e. 1

        while (i * i <= k) {
            var count = 1           // count no of  divisors
            while (k % i == 0) {
                k /= i
                count += 1
            }
            i += 1
            tau_n *= count
        }
        // corner case for we have not used step multiplication
        if (k == num || k > 1) {
            tau_n *= 2
        }
        return tau_n
    }
}

let hdtn = HighlyDivisibleTriangularNumber()
print(hdtn.solution(over: 500))
// 76576500
